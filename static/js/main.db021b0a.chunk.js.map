{"version":3,"sources":["api/github-api.service.ts","pages/MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GithubApiService","baseUrl","username","path","this","decorateFetchData","axios","get","buildUrl","repository","text","post","fetchMethodPromise","then","data","MainPage","useState","loading","errors","undefined","state","setState","githubApiService","history","useHistory","errorsAlert","message","description","type","style","marginTop","className","title","subTitle","textAlign","size","placeholder","value","onChange","event","target","onClick","getUser","push","catch","err","response","RepositoriesPage","lazy","RepositoryContentPage","App","color","span","offset","fallback","display","justifyContent","padding","exact","render","p","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db021b0a.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\n\nexport class GithubApiService {\n  baseUrl = 'https://api.github.com';\n\n  getUser(username: string) {\n    const path = `/users/${username}`;\n    return this.decorateFetchData(\n      axios.get(this.buildUrl(path))\n    );\n  }\n\n  getRepositories(username: string) {\n    const path = `/users/${username}/repos`;\n    return this.decorateFetchData(\n      axios.get(this.buildUrl(path))\n    );\n  }\n\n  getRepositoryContents(username: string, repository: string) {\n    const path = `/repos/${username}/${repository}/contents`;\n    return this.decorateFetchData(\n      axios.get(this.buildUrl(path))\n    );\n  }\n\n  getRepositoryReadme(username: string, repository: string) {\n    const path = `/repos/${username}/${repository}/readme`;\n    return this.decorateFetchData(\n      axios.get(this.buildUrl(path))\n    );\n  }\n\n  getMarkdown(text: string) {\n    const path = `/markdown`;\n    return this.decorateFetchData(\n      axios.post(this.buildUrl(path), { text })\n    );\n  }\n\n  private buildUrl(path: string) {\n    return `${this.baseUrl}${path}`;\n  }\n\n  private decorateFetchData(fetchMethodPromise: Promise<AxiosResponse>) {\n    return fetchMethodPromise.then(({ data }) => data);\n  }\n}\n","import { Alert, Button, Input, PageHeader } from 'antd';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { GithubApiService } from '../../api/github-api.service';\n\ninterface MainPageState {\n  data: any;\n  username: string;\n  loading: boolean;\n  errors: any;\n}\n\nexport default function MainPage() {\n  const [state, setState] = useState<MainPageState>({\n    data: {},\n    username: '',\n    loading: false,\n    errors: undefined,\n  });\n  const githubApiService = new GithubApiService();\n  const history = useHistory();\n  const errorsAlert = (\n    <Alert\n      message=\"Error\"\n      description={ state.errors?.message || 'Something went wrong. Please try again later' }\n      type=\"error\"\n      style={{ marginTop: '16px' }}\n    />\n  );\n  \n  return (\n    <>\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"Main page\"\n        subTitle=\"Select Github user\"\n      />\n      \n      <div className=\"page-content\">\n        <div style={{ textAlign: 'center' }}>\n          <Input size=\"large\" placeholder=\"Enter user nickname\" value={state.username} onChange={updateSearchValue} />\n          <Button type=\"primary\" style={{ marginTop: 8 }} onClick={search}>\n            Search\n          </Button>\n        </div>\n\n        { state.errors ? errorsAlert : <></> }\n      </div>\n    </>\n  );\n\n  function updateSearchValue(event: React.BaseSyntheticEvent) {\n    setState({\n      ...state,\n      username: event.target.value,\n    });\n  }\n\n  function search() {\n    githubApiService.getUser(state.username)\n      .then(data => {\n        history.push(`/${state.username}`, { data });\n      })\n      .catch(err => setState({ ...state, errors: err.response.data || err }));\n  }\n}\n","import React, { lazy, Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './App.scss';\nimport Layout, { Content, Header } from 'antd/lib/layout/layout';\nimport { Col, Row, Spin } from 'antd';\nimport MainPage from './pages/MainPage/MainPage';\n\nconst RepositoriesPage = lazy(() => import('./pages/RepositoriesPage/RepositoriesPage'));\nconst RepositoryContentPage = lazy(() => import('./pages/RepositoryContentPage/RepositoryContentPage'));\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Layout className=\"layout\">\n          <Header>\n            <h1 style={{color: 'white'}}>Github repo viewer app</h1>\n          </Header>\n          \n          <Content>\n            <Row>\n              <Col span={12} offset={6}>\n              \n                <Suspense fallback={\n                  <Spin size=\"large\" style={{ display: 'flex', justifyContent: 'center', padding: '1rem' }}/>\n                }>\n                  <Switch>\n                    <Route exact path=\"/\">\n                      <MainPage />\n                    </Route>\n\n                    <Route\n                      exact\n                      path=\"/:username\"\n                      render={(p)=>(<RepositoriesPage {...p}  />)}\n                    />\n\n                    <Route\n                      exact\n                      path=\"/:username/:repositoryName\"\n                      render={(p)=>(<RepositoryContentPage {...p}  />)}\n                    />\n                  </Switch>\n                </Suspense>\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}