{"version":3,"sources":["pages/RepositoryContentPage/RepositoryContentPage.tsx"],"names":["RepositoryContentPage","props","githubApiService","GithubApiService","history","match","useState","files","undefined","readmeMarkdown","loading","state","setState","filesCard","title","itemLayout","size","dataSource","renderItem","item","Item","Meta","style","marginBottom","avatar","type","createElement","FolderOutlined","FileTextOutlined","name","readmeCard","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","image","Empty","PRESENTED_IMAGE_SIMPLE","useEffect","filesPromise","getRepositoryContents","params","username","repositoryName","catch","readmePromise","getReadmeMarkdown","Promise","all","then","getRepositories","className","subTitle","onBack","goBack","direction","width","a","getRepositoryReadme","content","decodedContent","atob","getMarkdown","markdownContent"],"mappings":"uUAkBe,SAASA,EAAsBC,GAC5C,IAAMC,EAAmB,IAAIC,IACrBC,EAAmBH,EAAnBG,QAASC,EAAUJ,EAAVI,MACjB,EAA0BC,mBAAqC,CAC7DC,WAAOC,EACPC,oBAAgBD,EAChBE,SAAS,IAHX,mBAAOC,EAAP,KAAcC,EAAd,KAUMC,EACJ,cAAC,IAAD,CAAMC,MAAM,QAAQJ,QAASC,EAAMD,QAAnC,SACE,cAAC,IAAD,CACEK,WAAW,WACXC,KAAK,QACLC,WAAYN,EAAMJ,MAClBW,WAAa,SAAAC,GAAI,OACf,cAAC,IAAKC,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACEC,MAAO,CAAEC,aAAc,GACvBC,QAfY,EAeWL,EAdjB,QADwB,EAAhBM,KAEpBC,wBAAcC,KACdD,wBAAcE,MAaRd,MAAOK,EAAKU,QAJAV,EAAKU,MAZN,IAAC,OAuBlBC,EACJ,cAAC,IAAD,CAAMhB,MAAM,YAAYJ,QAASC,EAAMD,QAAvC,SAEIC,EAAMF,eACF,qBAAKsB,wBAAyB,CAACC,OAAQC,IAAUC,SAASvB,EAAMF,mBAChE,cAAC,IAAD,CAAO0B,MAAOC,IAAMC,2BAS9B,OAJAC,qBAAU,YAsBV,WACE1B,EAAS,2BAAKD,GAAN,IAAaD,SAAS,KAE9B,IAAM6B,EAAerC,EAClBsC,sBAAsBnC,EAAMoC,OAAOC,SAAUrC,EAAMoC,OAAOE,gBAC1DC,OAAM,iBAAM,MACTC,EArEwF,0CAqExEC,GACnBF,OAAM,iBAAM,MAEfG,QAAQC,IAAI,CAAET,EAAcM,IACzBI,MAAK,mCAAE1C,EAAF,KAASE,EAAT,YAA6BG,EAAS,CAAEL,QAAOE,iBAAgBC,SAAS,OA/BhFwC,KACC,IAGD,qCACE,cAAC,IAAD,CACEC,UAAU,mBACVrC,MAAK,UAAMT,EAAMoC,OAAOC,SAAnB,cAAiCrC,EAAMoC,OAAOE,gBACnDS,SAAS,mBACTC,OAAQ,kBAAMjD,EAAQkD,YAExB,qBAAKH,UAAU,eAAf,SAEE,eAAC,IAAD,CAAOI,UAAU,WAAWjC,MAAO,CAAEkC,MAAO,QAA5C,UACI3C,EACAiB,UAzDsF,4CA4EhG,kCAAA2B,EAAA,sEAC0BvD,EAAiBwD,oBAAoBrD,EAAMoC,OAAOC,SAAUrC,EAAMoC,OAAOE,gBADnG,uBACSgB,EADT,EACSA,QACDC,EAAiBC,KAAKF,GAF9B,kBAIkCzD,EAAiB4D,YAAYF,GAJ/D,cAIUG,EAJV,yBAMWA,GANX,2DASWH,GATX,2DA5EgG","file":"static/js/6.944f97a0.chunk.js","sourcesContent":["import { Card, Empty, List, PageHeader, Space } from \"antd\";\nimport DOMPurify from \"dompurify\";\nimport { createElement, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { GithubApiService } from \"../../api/github-api.service\";\nimport { FolderOutlined, FileTextOutlined } from '@ant-design/icons';\n\ninterface RepositoryContentProps {\n  username: string;\n  repositoryName: string;\n}\n\ninterface RepositoryContentPageState {\n  files: any[] | undefined;\n  readmeMarkdown: any | undefined;\n  loading: boolean;\n}\n\nexport default function RepositoryContentPage(props: RouteComponentProps<RepositoryContentProps>) {\n  const githubApiService = new GithubApiService();\n  const { history, match } = props;\n  const [state, setState] = useState<RepositoryContentPageState>({\n    files: undefined,\n    readmeMarkdown: undefined,\n    loading: false,\n  });\n  const itemIconByType = ({ type }: any) => {\n    return type === 'dir'\n      ? createElement(FolderOutlined)\n      : createElement(FileTextOutlined);\n  }\n  const filesCard = (\n    <Card title=\"Files\" loading={state.loading}>\n      <List\n        itemLayout=\"vertical\"\n        size=\"small\"\n        dataSource={state.files}\n        renderItem={ item =>\n          <List.Item key={item.name} >\n            <List.Item.Meta\n              style={{ marginBottom: 0 }}\n              avatar={itemIconByType(item)}\n              title={item.name}\n            />\n          </List.Item>\n        }\n      />\n    </Card>\n  );\n  const readmeCard = (\n    <Card title=\"README.md\" loading={state.loading}>\n      {\n        state.readmeMarkdown\n          ? <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(state.readmeMarkdown)}}></div>\n          : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      }\n    </Card>\n  );\n\n  useEffect(() => {\n    getRepositories();\n  }, []);\n\n  return (\n    <>\n      <PageHeader\n        className=\"site-page-header\"\n        title={ `${match.params.username} / ${match.params.repositoryName}` }\n        subTitle=\"Repository files\"\n        onBack={() => history.goBack()}\n      />\n      <div className=\"page-content\">\n\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          { filesCard }\n          { readmeCard }\n        </Space>\n      </div>\n    </>\n  );\n\n  function getRepositories() {\n    setState({ ...state, loading: true});\n\n    const filesPromise = githubApiService\n      .getRepositoryContents(match.params.username, match.params.repositoryName)\n      .catch(() => []);\n    const readmePromise = getReadmeMarkdown()\n      .catch(() => '');\n\n    Promise.all([ filesPromise, readmePromise ])\n      .then(([files, readmeMarkdown]) => setState({ files, readmeMarkdown, loading: false }));\n  }\n\n  async function getReadmeMarkdown() {  \n    const {content} = await githubApiService.getRepositoryReadme(match.params.username, match.params.repositoryName);\n    const decodedContent = atob(content);\n    try {\n      const markdownContent = await githubApiService.getMarkdown(decodedContent);\n  \n      return markdownContent;\n    } catch(err) {\n      // If some problem with markdown method - returns decoded content here (plain text)\n      return decodedContent;\n    }\n  }\n}\n"],"sourceRoot":""}